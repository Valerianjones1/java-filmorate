CREATE TABLE IF NOT EXISTS mpa
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL UNIQUE CHECK (name <> '')
);


CREATE TABLE IF NOT EXISTS film
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL,
    description VARCHAR,
    release_date DATE,
    duration INTEGER,
    rate INTEGER CHECK (rate >= 1 and rate <=10),
    mpa_id INTEGER REFERENCES public.mpa(id) ON DELETE CASCADE
    CONSTRAINT constr_valid CHECK (duration > 0 AND name <> '' AND description <> '')
);

CREATE TABLE IF NOT EXISTS users
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email VARCHAR NOT NULL,
    login VARCHAR NOT NULL,
    name VARCHAR,
    birthday DATE
    CONSTRAINT constr_user CHECK (email <> '' AND login <> '')
);


CREATE TABLE IF NOT EXISTS genre
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL CHECK (name <> '')
);


CREATE TABLE IF NOT EXISTS film_genre
(   id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER  REFERENCES PUBLIC.FILM (id) ON DELETE CASCADE,
    genre_id INTEGER REFERENCES PUBLIC.genre (id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS film_like
(
    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id INTEGER REFERENCES PUBLIC.FILM(id) ON DELETE CASCADE,
    user_id INTEGER REFERENCES PUBLIC.users(id) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS user_relation(
    user_id INTEGER REFERENCES PUBLIC.USERS(id) ON DELETE CASCADE,
    other_user_id INTEGER REFERENCES PUBLIC.users(id) ON DELETE CASCADE,
    CONSTRAINT pk_key primary key (user_id, other_user_id)
);

